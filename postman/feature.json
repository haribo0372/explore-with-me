{
	"info": {
		"_postman_id": "0f1d15e0-f3f9-4a55-8542-ef36db296560",
		"name": "Test Explore With Me - Feature Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26081744"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "Получить комментарий по id (Находит даже удаленные)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        \r",
											"        await api.deleteComment(user1.id, comment.id);\r",
											"        pm.collectionVariables.set(\"commId\", comment.id);\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => { }, 1000);\r",
											"\r",
											"setTimeout(async () => {\r",
											"    try {\r",
											"        await main();\r",
											"    } catch (e) {\r",
											"        console.error(e);\r",
											"    } finally {\r",
											"        clearInterval(interval);\r",
											"    }\r",
											"},\r",
											"    100\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eq(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить комментарий по id из БД",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        \r",
											"        await api.deleteComment(user1.id, comment.id); // при удалениии пользователем комментарий меняет статус, админ только может удалить комментарий из БД\r",
											"        \r",
											"        pm.collectionVariables.set(\"commId\", comment.id);\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => { }, 1000);\r",
											"\r",
											"setTimeout(async () => {\r",
											"    try {\r",
											"        await main();\r",
											"    } catch (e) {\r",
											"        console.error(e);\r",
											"    } finally {\r",
											"        clearInterval(interval);\r",
											"    }\r",
											"},\r",
											"    100\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eq(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить все комментарии события, даже удаленные пользователями",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        \r",
											"        await api.publishEvent(event.id);\r",
											"        \r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const comment = await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
											"\r",
											"        await api.deleteComment(user1.id, comment.id);  // при удалениии пользователем комментарий меняет статус, админ только может удалить комментарий из БД, в итоге админ должен получить 4 комментария (вместе с удаленным)\r",
											"\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eq(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/event/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"event",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить все комментарии события из БД",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        \r",
											"        await api.publishEvent(event.id);\r",
											"        \r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const comment = await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user1.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
											"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
											"\r",
											"        await api.deleteComment(user1.id, comment.id);  // при удалениии пользователем комментарий меняет статус, админ только может удалить комментарий из БД, в итоге админ должен получить 4 комментария (вместе с удаленным)\r",
											"\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eq(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response.eventId\", function () {\r",
											"    pm.expect(response).to.have.property('eventId');\r",
											"    pm.expect(response.eventId).to.be.not.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Response.numberOfDeletedComments\", function () {\r",
											"    pm.expect(response).to.have.property('numberOfDeletedComments');\r",
											"    pm.expect(response.numberOfDeletedComments).to.be.equal(4);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/event/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"event",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "0",
											"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
											"disabled": true
										},
										{
											"key": "size",
											"value": "1000",
											"description": "количество элементов в наборе",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Создание комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        const comment = rnd.getComment(event.id);\r",
									"\r",
									"        pm.collectionVariables.set(\"createComment\", JSON.stringify(comment));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{createComment}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        \r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
									"        var newText = rnd.getWord(40);\r",
									"        comment.text = newText;\r",
									"        pm.collectionVariables.set(\"updateComment\", JSON.stringify(comment));\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response.id\", function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response.text\", function () {\r",
									"    pm.expect(response).to.have.property('text');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{updateComment}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        \r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
									"        pm.collectionVariables.set(\"commId\", comment.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{commId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        \r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        await api.addComment(user.id, rnd.getComment(event.id));\r",
									"        await api.addComment(user.id, rnd.getComment(event.id));\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить все комментарии события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        \r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"\r",
									"        await api.addComment(user1.id, rnd.getComment(event.id));\r",
									"        await api.addComment(user1.id, rnd.getComment(event.id));\r",
									"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
									"        await api.addComment(user2.id, rnd.getComment(event.id));\r",
									"\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/event/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарий по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const comment = await api.addComment(user1.id, rnd.getComment(event.id));\r",
									"\r",
									"        pm.collectionVariables.set(\"commId\", comment.id);\r",
									"\r",
									"    } catch (err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => { }, 1000);\r",
									"\r",
									"setTimeout(async () => {\r",
									"    try {\r",
									"        await main();\r",
									"    } catch (e) {\r",
									"        console.error(e);\r",
									"    } finally {\r",
									"        clearInterval(interval);\r",
									"    }\r",
									"},\r",
									"    100\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eq(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, comment, verbose=null) {",
					"        return this.post(`/users/${userId}/comment`, comment, \"Ошибка при Создании комментария: \", verbose);",
					"    }",
					"    ",
					"    async deleteComment(userId, commentId, verbose=null) {",
					"        return this.delete(`/users/${userId}/comment/${commentId}`, null, \"Ошибка при Удалении комментария: \", verbose);",
					"    }",
					"",
					"    async getAllCommentsOfUser(userId, verbose=null){",
					"        return this.get(`/users/${userId}/comment`, null, \"Ошибка при поиске комментариев по userId\", verbose);",
					"    }",
					"",
					"    async getAllCommentsByEventId(eventId, verbose=null){",
					"        return this.get(`/comments/event/${eventId}`, null, \"Ошибка при поиске комментариев по eventId\", verbose);",
					"    }",
					"",
					"    async getCommentById(commId, verbose=null){",
					"        return this.get(`/comments/${commId}`, null, \"Ошибка при поиске комментариев по commentId\", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {",
					"        return this.mySendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    } else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"",
					"     async mySendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        resolve(null)",
					"                    } else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getComment(event){",
					"        return {",
					"            eventId: event,",
					"            text: this.getWord(8)",
					"        }",
					"    }",
					"    ",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "createComment",
			"value": "",
			"type": "string"
		},
		{
			"key": "updateComment",
			"value": "",
			"type": "string"
		},
		{
			"key": "commId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		}
	]
}